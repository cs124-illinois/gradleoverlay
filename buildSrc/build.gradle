plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.40'
}

group 'com.github.cs125-illinois'
version '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly gradleApi()
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// Maven deployment configuration based on:
// https://medium.com/@nmauti/sign-and-publish-on-maven-central-a-project-with-the-new-maven-publish-gradle-plugin-22a72a4bfd4b

apply plugin: 'signing'
apply plugin: 'maven-publish'

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    def signTasks = sign configurations.archives
    signTasks.each { t ->
        def signatures = t.getSignatures()
        signatures.removeAll { oneSig ->
            signatures.count { anotherSig -> oneSig.getClassifier() == anotherSig.getClassifier() } > 1
        }
    }
}

Properties properties = new Properties()
properties.load(project.file('local.properties').newDataInputStream())
def ossrhUsername = properties.getProperty('ossrh.username')
def ossrhPassword = properties.getProperty('ossrh.password')

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.github.cs125-illinois'
            artifactId 'gradleoverlay'
            version '2020.1.0'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed POM artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = DELEGATE_FIRST

            description 'Gradle plugin to overlay student submissions for grading'
            name 'GradleOverlay'
            url 'https://github.com/cs125-illinois/gradleoverlay'
            organization {
                name 'com.github.cs125-illinois'
                url 'https://github.com/cs125-illinois'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/cs125-illinois/gradleoverlay/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/cs125-illinois/gradleoverlay'
                connection 'scm:git:git://github.com/cs125-illinois/gradleoverlay.git'
                developerConnection 'scm:git:ssh://git@github.com:cs125-illinois/gradleoverlay.git'
            }
            developers {
                developer {
                    name 'CS 125'
                }
            }
        }
    }
}

model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
